#define sinistra 1
#define destra 0
#define avanti HIGH
#define indietro LOW
#define POT_MIN 110
#define N_misure 15
#define S 125
#define D 35
#define C 80

Servo myservo;                  // create servo object to control a servo
// a maximum of eight servo objects can be created
int pos = 90;
int pwm_a = 10;                 //PWM control for motor outputs 1 and 2 is on digital pin 10
int pwm_b = 11;                 //PWM control for motor outputs 3 and 4 is on digital pin 11
int dir_a = 12;                 //direction control for motor outputs 1 and 2 is on digital pin 12
int dir_b = 13;                 //direction control for motor outputs 3 and 4 is on digital pin 13
float AS, PD, AD, PS;
int dist_P_min, dist_P_max, dist_P_media, angolo_curva, dir_curva, inizio_curva;
int dist_A_min, dist_A_max, dist_A_media, rapporto;
int t;
int blocco = 0;

void setup()
{
// initialize the serial communication:
        Serial.begin(9600);
// initialize servo and motor-shield
        myservo.attach(9);
        pinMode(pwm_b, OUTPUT);
        pinMode(dir_b, OUTPUT);
// seti initial value for the motor
        digitalWrite(dir_b, HIGH);
        analogWrite(pwm_b, 0);
}

void aggiorna()
{
//vengono effettuate tutte le misure e ricalcolate le variabili
        AS = 0;
        AD = 0;
        PS = 0;
        PD = 0;
        int i = 0;
        for (i = 0; i < N_misure; i++) {
                AS += 2076.0 / (constrain(analogRead(A2), 80, 530) – 11.0);
                AD += 2076.0 / (constrain(analogRead(A4), 80, 530) – 11.0);
                PS += 9462.0 / (constrain(analogRead(A1), 80, 550) – 16.92);
                PD += 9462.0 / (constrain(analogRead(A3), 80, 550) – 16.92);
        }
        AS /= N_misure;
        AD /= N_misure;
        PS /= N_misure;
        PD /= N_misure;
        PD += 1.5;
        PD = constrain(PD, 0, 150);
        dist_P_min = min(PD, PS);
        dist_P_max = max(PD, PS);
        dist_P_media = (PD + PS) / 2;
        dist_A_min = min(AD, AS);
        dist_A_max = max(AD, AS);
        dist_A_media = (AD + AS) / 2;
        if ((PD – PS) > 0)
                dir_curva = 0;
        else
                dir_curva = 1;
        int angolo_curva_c = 9 – atan(abs(PD – PS) / 15.5) * (2 / 3.14) * 9;
        int angolo_curva_d = 9 – atan(abs(PD – 18) / AD) * (2 / 3.14) * 9;
        int angolo_curva_s = 9 – atan(abs(PS – 18) / AS) * (2 / 3.14) * 9;
//restituisce un valore da 0 a 10 per l’angolo
        if (AS < AD) {
                angolo_curva = max(angolo_curva_c, angolo_curva_s);
        } else {
                angolo_curva = max(angolo_curva_d, angolo_curva_c);
        }
}

void debug()
{
        Serial.print(AS);
        Serial.print("|");
        Serial.print(AD);
        Serial.print("|");
        Serial.print(PS);
        Serial.print("|");
        Serial.print(PD);
        Serial.print("|");
        Serial.println(angolo_curva);
}


int stato()
{
//la funzione ritorna lo stato della vettura: 0 rettilineo, 1 curva, 2 collisione
        if (dist_P_min < 19 || dist_A_min < 5) {
                blocco++;
        } else
                blocco = 0;
        if (blocco > 25)
                return 2;
        if (dist_P_min > 35)
                return 0;
        else
                return 1;
}

void motore(boolean dir, int potenza, int angolo)
{
// la funzione compensa il maggior sforzo richiesto al motore con ruote sterzate e fissa il minimo della potenza
// la potenza deve avere un valore intero tra 0 e 10
        potenza = constrain(potenza, 0, 10);
        if (potenza != 0)
                potenza =
                    constrain(map
                              (potenza + angolo / 2 + 1, 1, 10, POT_MIN, 254),
                              POT_MIN, 214);
        digitalWrite(dir_b, dir);
        analogWrite(pwm_b, potenza);
//analogWrite(pwm_b, 0);
//Serial.println(dir);
}

void sterzo(int dir, int angolo)
{
        int a = 0;
// la funzione richiede in ingresso la direzione e l’angolo di sterzata
// l’angolo deve avere un valore tra 0 e 10
        angolo = constrain(angolo, 0, 10);
        if (dir == sinistra)
                a = map(angolo, 0, 10, C, S);
        if (dir == destra)
                a = map(angolo, 0, 10, C, D);
        myservo.write(a);
}

void sposta(int dir, int potenza, int tempo)
{
        motore(avanti, potenza, 4);
        if (dir == sinistra) {
                sterzo(sinistra, 4);
                delay(tempo);
                sterzo(destra, 4);
                delay(tempo);
                sterzo(sinistra, 0);
        }
        if (dir == destra) {
                sterzo(destra, 4);
                delay(tempo);
                sterzo(sinistra, 4);
                delay(tempo);
                sterzo(sinistra, 0);
        }
}
 

void loop()
{
        int x;
        aggiorna();
        float V_AS, V_AD;
        V_AS = AS;
        V_AD = AD;
        if (dist_P_min > 60) {
                delay(20);
                aggiorna();
//                if (AD > V_AD – 0.2) {
//                        sterzo(destra, (AD – V_AD) * 5);
//                        delay(20);
//                }
               // if (AS > V_AS – 0.2) {
                 // sterzo(sinistra, (AS – V_AS) * 5);
                //  delay(20);
//               }
        //}
        switch (stato()) {
        case 0:
                motore(avanti, map(pow(dist_P_min / 10, 2), 0, 200, 1, 10), 0);
                if (AS < 6) {
                        sterzo(destra, 5);
                        break;
                }
                if (AD < 6) {
                        sterzo(sinistra, 5);
                        break;
                }
                if (AS < 7) {
                        sterzo(destra, 3);
                        break;
                }
                if (AD < 7) {
                        sterzo(sinistra, 3);
                        break;
                }
                if (AS < 8) {
                        sterzo(destra, 2);
                        break;
                }
                if (AD < 8) {
                        sterzo(sinistra, 2);
                        break;
                }
                if (V_AS > 14 && dir_curva == destra && angolo_curva > 5
                    && dist_P_min > 60)
                        sposta(sinistra, 1, 80);
                if (V_AD > 14 && dir_curva == sinistra && angolo_curva > 5
                    && dist_P_min > 60)
                        sposta(destra, 1, 80);
                sterzo(sinistra, 0);
                break;
        case 1:
//curva
//inizio_curva=((10-angolo_curva)*7)+5;
                if ((dir_curva == destra && AS < 9)
                    || (dir_curva == sinistra && AD < 9) || (dist_P_media < 41)
                    || (dir_curva == destra && PS < 27)
                    || (dir_curva == sinistra && PD < 27)) {
                        if (dist_P_media > 25) {
                                sterzo(dir_curva, angolo_curva);
                               // motore(avanti, constrain((dist_P_min / 30) – angolo_curva / 3, 1, 10), angolo_curva);
                        } else {
                                sterzo(dir_curva, 10);
                                motore(avanti, 1, 10);
                        }
                } else {
                        sterzo(sinistra, 0);
                }
                break;
        case 2:
//blocco
                motore(indietro, 1, 10);
                delay(30);
                if (dir_curva == sinistra)
                        sterzo(destra, 10);
                if (dir_curva == destra)
                        sterzo(sinistra, 10);
                while ((dist_P_min < 19) || (dist_A_min < 6)) {
                        aggiorna();
                }
                sterzo(sinistra, 0);
                motore(avanti, 1, 0);
                break;
        }
}
